syntax = "proto3";

package unitdb.schema;

option go_package='.;schema';

// Unitdb server interface
service Unitdb {
	rpc Stream (stream Packet) returns (stream Packet);
}

message Empty {
}

message Packet {
	bytes data=1;
}

enum FlowControl {
	NONE=0;
	ACKNOWLEDGE=1;
	NOTIFY=2;
	RECEIVE=3;
	RECEIPT=4;
	COMPLETE=5;
}

enum MessageType {
	RERSERVED=0;
	CONNECT=1;
	PUBLISH=2;
	RELAY=3;
	SUBSCRIBE=4;
	UNSUBSCRIBE=5;
	PINGREQ=6;
	DISCONNECT=7;
}

message FixedHeader {
	MessageType MessageType=1;
	FlowControl FlowControl=2;
	int32 MessageLength=3;
}

// Connect represents a CONNECT Message type.
message Connect {
	int32 Version=1;
	bool InsecureFlag=2;
	string ClientID=3;
	int32 KeepAlive=4;
	bool CleanSessFlag=5;
	int32 SessKey=6;
	string Username=7;
	bytes Password=8;
	string sessionData = 9;
	int32 BatchDuration=10;
	int32 BatchByteThreshold=11;
	int32 BatchCountThreshold=12;
}

// ConnectAcknowledge represents a CONNECT Acknowledge Message type.
// 0x00 connection accepted
// 0x01 refused: unacceptable proto version
// 0x02 refused: identifier rejected
// 0x03 refused: unacceptable identifier, access not allowed
// 0x04 refused server unavailiable
// 0x05 not authorized
// 0x06 bad request
message ConnectAcknowledge {
	int32 ReturnCode=1;
	int32 Epoch=2;
	int32 ConnID=3;
}

// PingRequest is a keepalive
message PingRequest {
}

// Disconnect is to signal client want to cease communications with the server.
message Disconnect {
	int32 MessageID=1;
}

message PublishMessage {
	string Topic=1;
	bytes Payload=2;
	string Ttl=3;
}

// Publish represents a PUBREQ Message type. It supports following delivery mode.
// 0 EXPRESS
// 1 RELIEABLE
// 2 BATCH
message Publish {
	int32 MessageID=1;
	int32 DeliveryMode=2;
	repeated PublishMessage Messages=3;
}

// RelayRequest is pairing the Topic and Last parameter together
message RelayRequest {
	string Topic=1;
	map<string, string> Tags = 2;
	string Last=3;
}

// Relay tells the server which topics and last durations the client would like get data persisted on Servr. The Delivery Mode for relay is EXPRESS.
message Relay {
	int32 MessageID=1;
	repeated RelayRequest relayRequests=2;
}

// Subscription is pairing the Delivery Mode and Topic together
// for the delivery mode's pairs in unsubscribe and subscribe.
// Delay in Millisecond to delay the messsage delivery if DeliveryMode is RELIEABLE or BATCH.
// 0 EXPRESS
// 1 RELIEABLE
// 2 BATCH
message Subscription {
	int32 DeliveryMode=1;
	int32 Delay=2;
	string Topic=3;
	string Last=4;
}

// Subscribe tells the server which topics the client would like to subscribe to and choose a Delivery Mode.
message Subscribe {
	int32 MessageID=1;
	repeated Subscription Subscriptions=2;
}

// Unsubscribe is the Message to send if you don't want to subscribe to a topic anymore.
message Unsubscribe {
	int32 MessageID=1;
	repeated  Subscription Subscriptions=2;
}

// ControlMessage is a Flow Control Message.
message ControlMessage {
	int32 MessageID=1;
	// Optional Control Message bytes
	bytes Message=2;
}